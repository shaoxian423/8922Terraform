name: Terraform and Conftest CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform-conftest:
    name: Terraform Plan and Conftest Test
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Check for large files
      - name: Check for large files
        run: |
          find . -type f -size +100M -exec ls -lh {} \;
          if [ -n "$(find . -type f -size +100M)" ]; then
            echo "Error: Large files detected (>100MB)"
            exit 1
          fi

      # Install Terraform (use a stable, recent version)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7  # Updated to a more recent version; adjust if needed

      # Install Conftest
      - name: Install Conftest
        run: |
          wget -q https://github.com/open-policy-agent/conftest/releases/download/v0.45.0/conftest_0.45.0_Linux_x86_64.tar.gz
          tar -xzf conftest_0.45.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/
          conftest --version

      # Test network connectivity to Terraform registry
      - name: Test network connectivity
        run: |
          curl -I https://registry.terraform.io || { echo "Cannot reach Terraform registry"; exit 1; }

      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      # Validate Azure credentials before login
      - name: Validate Azure credentials
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
        run: |
          if [ -z "$AZURE_USERNAME" ]; then
            echo "Error: AZURE_USERNAME is not set in GitHub Secrets"
            exit 1
          fi
          echo "Azure username is set (value masked for security)"

      # Login to Azure CLI with enhanced error handling
      - name: Login to Azure CLI
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          if [ -z "$AZURE_PASSWORD" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$ARM_SUBSCRIPTION_ID" ]; then
            echo "Error: One or more required secrets (AZURE_PASSWORD, ARM_TENANT_ID, ARM_SUBSCRIPTION_ID) are not set"
            exit 1
          fi
          echo "Attempting Azure login..."
          az login --username "$AZURE_USERNAME" --password "$AZURE_PASSWORD" --tenant "$ARM_TENANT_ID" > login_output.log 2> login_error.log
          if [ $? -ne 0 ]; then
            echo "Azure login failed. Error details:"
            cat login_error.log
            exit 1
          fi
          echo "Azure login successful"
          az account set --subscription "$ARM_SUBSCRIPTION_ID" 2> subscription_error.log
          if [ $? -ne 0 ]; then
            echo "Failed to set subscription. Error details:"
            cat subscription_error.log
            exit 1
          fi
          echo "Subscription set successfully"

      # Upload login logs on failure
      - name: Upload Azure login logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: azure-login-logs
          path: |
            login_output.log
            login_error.log
            subscription_error.log

      # Initialize Terraform
      - name: Terraform Init
        run: |
          terraform init -no-color -reconfigure 2> init_error.log
          if [ -s init_error.log ]; then
            echo "Terraform init errors:"
            cat init_error.log
            exit 1
          fi

      # Validate Terraform configuration
      - name: Terraform Validate
        run: |
          terraform validate 2> validate_error.log
          if [ -s validate_error.log ]; then
            echo "Terraform validation errors:"
            cat validate_error.log
            exit 1
          fi

      # Generate Terraform plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -no-color > plan_output.log 2> plan_error.log
          if [ -s plan_error.log ]; then
            echo "Terraform plan errors (stderr):"
            cat plan_error.log
            exit 1
          fi
          if [ -s plan_output.log ]; then
            echo "Terraform plan output (stdout):"
            cat plan_output.log
          fi
          if [ ! -f tfplan ]; then
            echo "Error: tfplan file not generated"
            exit 1
          fi

      # Upload Terraform logs on failure
      - name: Upload Terraform logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-logs
          path: |
            plan_error.log
            plan_output.log

      # Convert Terraform plan to JSON
      - name: Convert Terraform Plan to JSON
        run: terraform show -json tfplan > tfplan.json

      # Verify JSON format
      - name: Verify Terraform Plan JSON
        run: jq . tfplan.json || { echo "Invalid JSON in tfplan.json"; exit 1; }

      # Debug tfplan.json on failure
      - name: Debug tfplan.json on failure
        if: failure()
        run: head tfplan.json

      # Verify Conftest policies
      - name: Verify Conftest Policies
        run: conftest verify -p policies || { echo "Invalid policies"; exit 1; }

      # Run Conftest tests
      - name: Conftest Test
        run: conftest test tfplan.json -p policies --trace || { echo "Conftest test failed"; exit 1; }ÃŸ