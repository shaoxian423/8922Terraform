name: Terraform and Conftest CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform-conftest:
    name: Terraform Plan and Conftest Test
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Check for large files
      - name: Check for large files
        run: |
          find . -type f -size +100M -exec ls -lh {} \;
          if [ -n "$(find . -type f -size +100M)" ]; then
            echo "Error: Large files detected (>100MB)"
            exit 1
          fi

      # Install Terraform (match your local version)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      # Install Conftest (match your local version)
      - name: Install Conftest
        run: |
          wget -q https://github.com/open-policy-agent/conftest/releases/download/v0.45.0/conftest_0.45.0_Linux_x86_64.tar.gz
          tar -xzf conftest_0.45.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/
          conftest --version

      # Test network connectivity to Terraform registry
      - name: Test network connectivity
        run: |
          curl -I https://registry.terraform.io || { echo "Cannot reach Terraform registry"; exit 1; }

      # Initialize Terraform
      - name: Terraform Init
        run: |
          terraform init -no-color -reconfigure 2> init_error.log
          if [ -s init_error.log ]; then
            echo "Terraform init errors:"
            cat init_error.log
            exit 1
          fi

      # Validate Terraform configuration
      - name: Terraform Validate
        run: |
          terraform validate 2> validate_error.log
          if [ -s validate_error.log ]; then
            echo "Terraform validation errors:"
            cat validate_error.log
            exit 1
          fi

      # Generate Terraform plan
      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform plan -out=tfplan -no-color 2> plan_error.log
          if [ -s plan_error.log ]; then
            echo "Terraform plan errors:"
            cat plan_error.log
            exit 1
          fi

      # Convert Terraform plan to JSON
      - name: Convert Terraform Plan to JSON
        run: terraform show -json tfplan > tfplan.json

      # Verify JSON format
      - name: Verify Terraform Plan JSON
        run: jq . tfplan.json || { echo "Invalid JSON in tfplan.json"; exit 1; }

      # Verify Conftest policies
      - name: Verify Conftest Policies
        run: conftest verify -p policies || { echo "Invalid policies"; exit 1; }

      # Run Conftest tests
      - name: Conftest Test
        run: conftest test tfplan.json -p policies --trace || { echo "Conftest test failed"; exit 1; }